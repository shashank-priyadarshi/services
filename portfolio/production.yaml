version: "3.8"
services:
  mongodb:
    image: mongo
    container_name: mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    volumes:
      - mongodb-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - common
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --username ${MONGO_INITDB_ROOT_USERNAME} --password ${MONGO_INITDB_ROOT_PASSWORD} mongodb:27017/${MONGO_INITDB_DATABASE} --quiet
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
  mongo-express:
    image: mongo-express
    container_name: express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
    volumes:
      - mongodb-data:/data/db
    depends_on:
      - mongodb
    networks:
      - common
    healthcheck:
      test: wget --quiet --tries=3 --spider http://${ME_CONFIG_BASICAUTH_USERNAME}:${ME_CONFIG_BASICAUTH_PASSWORD}@express:8081 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - 8081:8081
    restart: always
  mysql:
    container_name: mysql
    image: mysql:8.0
    restart: always
    networks:
      - common
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysql:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
  portainer:
    container_name: portainer
    image: portainer/portainer-ee:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    restart: always
    ports:
      - 9000:9000
    networks:
      - common
  backend:
    container_name: backend
    image: nathukaka/upgraded-disco:updated-middleware
    environment:
      - SQL_URI=${SQL_URI}
      - MONGO_URI=${MONGO_URI}
      - DB_NAME=${DB_NAME}
      - SERVER_ORIGIN=$(SERVER_ORIGIN)
      - ALLOWED_ORIGIN=$(ALLOWED_ORIGIN)
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - GITHUB_USERNAME=${GITHUB_USERNAME}
      - SECRET_KEY=${SECRET_KEY}
      - SERVER_PORT=${SERVER_PORT}
      - GITHUB_PORT=${GH_INTEGRATION_ORIGIN}
      - SCHEDULE_PORT=$(SCHEDULE_PORT)
      - GITHUB=${GITHUB}
      - GRAPH=${GRAPH}
      - SCHEDULE=${SCHEDULE}
      - NEWRELIC_APP=${NEWRELIC_APP}
      - NEWRELIC_LICENSE=${NEWRELIC_LICENSE}
      - NEWRELIC_LOG_FORWARD=${NEWRELIC_LOG_FORWARD}
    depends_on:
      - mongodb
    networks:
      - common
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    restart: always
  portfolio:
    container_name: portfolio
    image: nathukaka/portfolio:admin
    depends_on:
      - backend
    networks:
      - common
    ports:
      - 80:80
    restart: always

volumes:
  mongodb-data:
    name: mongodb-data
  portainer_data:
  mysql:

networks:
  common:
    name: common
